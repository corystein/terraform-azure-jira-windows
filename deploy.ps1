param(
    [switch]$RemoveBeforeInstall,
    [switch]$Destroy,
    [switch]$UseTfVarsFile,
    [switch]$UseMSDNSubscription
)

# Stop script on any error
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"


#[Environment]::SetEnvironmentVariable("TF_LOG", "", "User")
#[Environment]::SetEnvironmentVariable("TF_LOG", "", "Machine")
#[Environment]::SetEnvironmentVariable("msdn_subsciption_id", "", "User")
#[Environment]::SetEnvironmentVariable("client_id", "", "Process")
#[Environment]::SetEnvironmentVariable("client_secret", "", "Process")
#[Environment]::SetEnvironmentVariable("subscription_id", "", "Process")
#[Environment]::SetEnvironmentVariable("tanant_id", "", "Process")



##################################################
# Validation
##################################################
if (-not($UseTfVarsFile)) {
    if (-not (Test-Path env:subscription_id)) { throw "Enviornment variable [subscription_id] is REQUIRED" }
    if (-not (Test-Path env:client_id)) { throw "Enviornment variable [client_id] is REQUIRED" }
    if (-not (Test-Path env:client_secret)) { throw "Enviornment variable [client_secret] is REQUIRED" }
    if (-not (Test-Path env:tenant_id)) { throw "Enviornment variable [tenant_id] is REQUIRED" }
}

if ($UseMSDNSubscription) {
    if (-not (Test-Path env:msdn_subscription_id)) { throw "Enviornment variable [msdn_subscription_id] is REQUIRED" }
}
##################################################

###################################################################################
# BEGIN : FUNCTIONS
###################################################################################

function main() {

    try {
        # (Start) Capture duration metrics
        $BuildTime = [Diagnostics.Stopwatch]::StartNew()

        [Environment]::SetEnvironmentVariable("ADAL_PYTHON_SSL_NO_VERIFY", "1", "Process")
        [Environment]::SetEnvironmentVariable("AZURE_CLI_DISABLE_CONNECTION_VERIFICATION", "1", "Process")


        if ($UseMSDNSubscription) {
            az account set --subscription $Env:msdn_subscription_id
        }

        if (-not($UseTfVarsFile)) {
            az login --service-principal -u "$($Env:client_id)" -p "$($Env:client_secret)" --tenant "$($Env:tenant_id)"
            if ($LASTEXITCODE -ne 0) { throw "Failure logging in to Azure"}
            az account get-access-token

            #az account set --subscription <name or id>
        }
        #return

        # Create tfvars file
        if (-not($UseTfVarsFile)) {
            if (Test-Path .\terraform.tfvars) { Remove-Item -Path .\terraform.tfvars -Force | Out-Null }
            $terraformvars = @" 
subscription_id = "$($Env:subscription_id)"
client_id = "$($Env:client_id)"
client_secret = "$($Env:client_secret)"
tenant_id = "$($Env:tenant_id)"
"@ 
            $terraformvars | Out-File -FilePath .\terraform.tfvars -Encoding ASCII -Force
        }
        else {
            Write-Warning "Using TfVars File"
        }

        # init
        if (-not(Test-Path "./terraform")) {
            terraform init
            if ($LASTEXITCODE -ne 0) { throw "Failure initializing terraform"}
        }

        if ($Destroy) {
            terraform destroy -auto-approve;
            return
        }

        
        # Used to download and update modules mentioned in the root module
        terraform get;

        # Used to validate the syntax of the terraform files
        terraform validate
        if ($LASTEXITCODE -ne 0) { throw "Failure validating terraform files"}


        # Used to create an execution plan
        terraform plan
        if ($LASTEXITCODE -ne 0) { throw "Failure executing terraform plan"}

        # Used to apply the changes required to reach the desired state of the configuration, or the pre-determined set of actions generated by a terraform plan execution plan
        terraform apply -auto-approve;
        if ($LASTEXITCODE -ne 0) { throw "Failure executing terraform apply"}
        
        # Display execution duration
        $BuildTime.Stop()
        $TimeOutput = $BuildTime.Elapsed
        Write-Host "Total build time: [$($TimeOutput.Minutes)m $($TimeOutput.Seconds)s]"
    }
    catch {
        Write-Error $_.Exception.Message
        throw
    }
    finally {
        # Clean up
        if (-not($UseTfVarsFile)) {
            if (Test-Path .\terraform.tfvars) {
                Remove-Item -Path .\terraform.tfvars -Force | Out-Null
            }
        }
    }
} 

###################################################################################
# END : FUNCTIONS
###################################################################################

# Call main
main